#!/usr/bin/env python
"""Roomreader is a simple client for reading messages in multiple rooms.
Roomreader can print messages to stdout (default) or to a log file.
"""

from idiokit import threado
from idiokit.jid import JID
from abusehelper.core import bot, events

class Roomreader(bot.XMPPBot):
    xmpp_rooms = bot.ListParam("comma separated list of XMPP "+
                               "rooms roomreader should watch. "+
                               "(e.g. room@conference.example.com, "+
                               "room2@conference.example.com)")
                               
    show_events = bot.BoolParam("print out events from channels")

    @threado.stream
    def main(inner, self):
        xmpp = yield inner.sub(self.xmpp_connect())
        
        rooms = list()
        for name in self.xmpp_rooms:
            room = yield inner.sub(xmpp.muc.join(name, self.bot_name))
            rooms.append(room 
                         | self.xmpp_to_log(room.nick_jid, room.participants)
                         | threado.dev_null())

        yield inner.sub(threado.pipe(*rooms))

    @threado.stream
    def xmpp_to_log(inner, self, own_jid, participants):
        in_room = set()
        for participant in  participants:
            in_room.add(participant.name.resource)
    
        while True:
            elements = yield inner

            for message in elements.with_attrs("from"):
                sender = JID(elements.get_attr("from"))
                if sender == own_jid:
                    continue
                if sender.resource is None:
                    continue

                ## Preserving this code for documentative purposes.
                ## You've gotta love the logic behind type & status.
                # for presence in message.named("presence").with_attrs("from"):
                #     type = presence.get_attr("type", None)
                #     for newstatus in presence.children('status'):
                #         status = newstatus.text

                resource = sender.resource.encode("unicode-escape")
                bare = unicode(sender.bare()).encode("unicode-escape")

                type = message.get_attr("type", None)
                if type == "unavailable":
                    if sender.resource in in_room:
                        in_room.discard(sender.resource)
                        self.log.info("* %s left the room %s.", resource, bare)
                else:
                    if sender.resource not in in_room:
                        in_room.add(sender.resource)
                        self.log.info("* %s entered the room %s.", resource, bare)

                for body in message.children("body"):
                    self.log.info("<%s> %s", 
                                  unicode(sender).encode("unicode-escape"), 
                                  body.text.encode("unicode-escape"))
                                  
                if self.show_events:
                    for event in message.children("event"):
                        event = events.Event.from_element(event)
                        self.log.info("<%s> %s",
                                    unicode(sender).encode("unicode-escape"),
                                    event)

if __name__ == "__main__":
    Roomreader.from_command_line().run()
